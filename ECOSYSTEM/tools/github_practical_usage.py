#!/usr/bin/env python3
"""
üé≠ GUIDE D'UTILISATION PRATIQUE - GITHUB SESSION MANAGER
Automatisation compl√®te des t√¢ches GitHub sans re-connexion
"""

import asyncio
from github_session_client import GitHubSessionClient

# Labels pour PaniniFS-1 (configuration compl√®te)
PANINI_LABELS_COMPLETE = [
    # Priorit√© et urgence
    {"name": "üî• Critical", "description": "Probl√®me critique n√©cessitant une action imm√©diate", "color": "ff0000"},
    {"name": "üéØ Priority", "description": "T√¢che prioritaire du projet", "color": "ff4757"},
    {"name": "‚ö° Urgent", "description": "N√©cessite une attention rapide", "color": "ff6b35"},
    
    # Types de t√¢ches
    {"name": "üöÄ Enhancement", "description": "Am√©lioration du syst√®me", "color": "2ecc71"},
    {"name": "üêõ Bug", "description": "Probl√®me √† corriger", "color": "e74c3c"},
    {"name": "üÜï Feature", "description": "Nouvelle fonctionnalit√©", "color": "3498db"},
    {"name": "üîß Maintenance", "description": "T√¢che de maintenance", "color": "95a5a6"},
    {"name": "üèóÔ∏è Infrastructure", "description": "Infrastructure et DevOps", "color": "34495e"},
    
    # Documentation et communication
    {"name": "üìö Documentation", "description": "Mise √† jour documentation", "color": "f39c12"},
    {"name": "üìù Content", "description": "Cr√©ation de contenu", "color": "f1c40f"},
    {"name": "üéì Tutorial", "description": "Guide ou tutoriel", "color": "e67e22"},
    {"name": "üìñ User Guide", "description": "Guide utilisateur", "color": "d35400"},
    
    # Tests et validation
    {"name": "üß™ Testing", "description": "Tests et validation", "color": "9b59b6"},
    {"name": "‚úÖ QA", "description": "Assurance qualit√©", "color": "8e44ad"},
    {"name": "üîç Review", "description": "R√©vision n√©cessaire", "color": "2c3e50"},
    {"name": "üéØ Validation", "description": "Validation requise", "color": "16a085"},
    
    # Domaines techniques
    {"name": "ü¶Ä Rust", "description": "Code Rust Core", "color": "ce422b"},
    {"name": "üêç Python", "description": "Code Python", "color": "306998"},
    {"name": "üåê Web", "description": "Interface web", "color": "61dafb"},
    {"name": "ü§ñ AI", "description": "Intelligence artificielle", "color": "ff6b6b"},
    {"name": "‚òÅÔ∏è Cloud", "description": "Services cloud", "color": "0ea5e9"},
    {"name": "üîê Security", "description": "S√©curit√©", "color": "dc2626"},
    
    # √âtat et workflow
    {"name": "üöß In Progress", "description": "En cours de d√©veloppement", "color": "f97316"},
    {"name": "‚è∏Ô∏è On Hold", "description": "En attente", "color": "6b7280"},
    {"name": "‚úÖ Ready", "description": "Pr√™t pour d√©ploiement", "color": "10b981"},
    {"name": "üîÑ Needs Update", "description": "N√©cessite une mise √† jour", "color": "eab308"},
    {"name": "‚ùì Question", "description": "Question ou clarification", "color": "06b6d4"},
    {"name": "üí¨ Discussion", "description": "Discussion en cours", "color": "8b5cf6"},
    
    # Composants PaniniFS
    {"name": "üç≥ Core", "description": "Syst√®me core PaniniFS", "color": "b91c1c"},
    {"name": "üîó Protocols", "description": "Protocoles et API", "color": "059669"},
    {"name": "üß† Semantic", "description": "Analyse s√©mantique", "color": "7c3aed"},
    {"name": "üîÑ Validation", "description": "Syst√®me de validation", "color": "0891b2"},
    {"name": "üìä Ecosystem", "description": "√âcosyst√®me et int√©grations", "color": "dc2626"},
    {"name": "‚öôÔ∏è Operations", "description": "Op√©rations et DevOps", "color": "374151"},
    {"name": "üî¨ Research", "description": "Recherche et d√©veloppement", "color": "7c2d12"},
    
    # Automatisation et AI
    {"name": "ü§ñ AI-Generated", "description": "G√©n√©r√© par IA", "color": "ff6b6b"},
    {"name": "üé≠ Playwright", "description": "Automation Playwright", "color": "2563eb"},
    {"name": "üîß Automation", "description": "Automatisation", "color": "059669"},
    {"name": "üöÄ Auto-Deploy", "description": "D√©ploiement automatique", "color": "7c3aed"},
    
    # Collaboration
    {"name": "üë• Team", "description": "Travail d'√©quipe", "color": "6366f1"},
    {"name": "üéØ Copilotage", "description": "Syst√®me de copilotage", "color": "ec4899"},
    {"name": "üìà Metrics", "description": "M√©triques et analytics", "color": "0891b2"},
    {"name": "üîó Dependencies", "description": "D√©pendances externes", "color": "6b7280"},
]

async def setup_complete_github_project():
    """Configuration compl√®te du projet GitHub"""
    client = GitHubSessionClient()
    
    print("üé≠ SETUP COMPLET PROJET GITHUB PANINI-FS")
    print("=" * 50)
    
    # Connexion
    if not await client.connect():
        print("‚ùå Impossible de se connecter au Session Manager")
        print("üí° D√©marrez d'abord: ./ECOSYSTEM/tools/github_session_control.sh start")
        return
    
    # V√©rifier l'√©tat
    status = await client.get_status()
    print(f"üìä √âtat session: {status.get('url', 'N/A')}")
    print(f"üîê Connect√©: {status.get('logged_in', False)}")
    
    if not status.get("logged_in", False):
        print("\n‚ö†Ô∏è  Session non connect√©e!")
        print("üí° Utilisez: ./ECOSYSTEM/tools/github_session_control.sh demo")
        print("   pour faire la connexion initiale")
        await client.disconnect()
        return
    
    try:
        # Navigation vers les labels
        print("\nüìç Navigation vers les labels...")
        result = await client.goto_url("https://github.com/stephanedenis/PaniniFS/labels")
        print(f"   ‚úÖ {result.get('url', 'N/A')}")
        
        # Cr√©ation des labels
        print(f"\nüè∑Ô∏è  Cr√©ation de {len(PANINI_LABELS_COMPLETE)} labels...")
        created_count = 0
        failed_count = 0
        
        for i, label in enumerate(PANINI_LABELS_COMPLETE, 1):
            print(f"\n[{i:2d}/{len(PANINI_LABELS_COMPLETE)}] {label['name']}")
            
            result = await client.create_label(**label)
            if result.get("success"):
                print(f"    ‚úÖ {result.get('message', 'Cr√©√©')}")
                created_count += 1
            else:
                error = result.get('error', 'Erreur inconnue')
                if "already exists" in error.lower():
                    print(f"    ‚ö†Ô∏è  Existe d√©j√†")
                else:
                    print(f"    ‚ùå {error}")
                    failed_count += 1
            
            # Pause entre cr√©ations
            await asyncio.sleep(1.5)
        
        # R√©sum√©
        print(f"\nüìä R√âSUM√â:")
        print(f"   ‚úÖ Cr√©√©s: {created_count}")
        print(f"   ‚ö†Ô∏è  Existants: {len(PANINI_LABELS_COMPLETE) - created_count - failed_count}")
        print(f"   ‚ùå √âchecs: {failed_count}")
        
        # Screenshot final
        print("\nüì∏ Screenshot final...")
        result = await client.take_screenshot("/tmp/github_labels_complete.png")
        if result.get("success"):
            print(f"   ‚úÖ Sauv√©: {result.get('screenshot_path')}")
        
        print("\nüéâ Configuration GitHub termin√©e!")
        print("üîó Voir: https://github.com/stephanedenis/PaniniFS/labels")
        
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√©...")
    except Exception as e:
        print(f"\nüö® Erreur: {e}")
    
    finally:
        await client.disconnect()

async def quick_issue_management():
    """Gestion rapide des issues"""
    client = GitHubSessionClient()
    
    if not await client.connect():
        return
    
    print("üìù GESTION RAPIDE DES ISSUES")
    print("=" * 30)
    
    # Navigation vers les issues
    await client.goto_url("https://github.com/stephanedenis/PaniniFS/issues")
    
    # Screenshot
    await client.take_screenshot("/tmp/github_issues.png")
    print("üì∏ Screenshot: /tmp/github_issues.png")
    
    await client.disconnect()

async def monitoring_session():
    """Monitoring de la session"""
    client = GitHubSessionClient()
    
    if not await client.connect():
        return
    
    print("üìä MONITORING SESSION GITHUB")
    print("=" * 30)
    
    status = await client.get_status()
    print(f"üåê URL actuelle: {status.get('url', 'N/A')}")
    print(f"üì∞ Titre: {status.get('title', 'N/A')}")
    print(f"üîê Connect√©: {status.get('logged_in', False)}")
    print(f"‚è±Ô∏è  Dur√©e session: {status.get('session_duration', 'N/A')}")
    
    await client.disconnect()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "setup":
            asyncio.run(setup_complete_github_project())
        elif command == "issues":
            asyncio.run(quick_issue_management())
        elif command == "monitor":
            asyncio.run(monitoring_session())
        else:
            print(f"‚ùå Commande inconnue: {command}")
    else:
        print("üé≠ UTILISATION PRATIQUE GITHUB SESSION")
        print("Usage:")
        print("  python3 github_practical_usage.py setup    # Configuration compl√®te")
        print("  python3 github_practical_usage.py issues   # Gestion issues")
        print("  python3 github_practical_usage.py monitor  # Monitoring session")
        print("")
        print("Pr√©requis:")
        print("  1. ./ECOSYSTEM/tools/github_session_control.sh start")
        print("  2. ./ECOSYSTEM/tools/github_session_control.sh demo  (premi√®re fois)")
        print("  3. python3 github_practical_usage.py setup")
