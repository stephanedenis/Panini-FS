#!/usr/bin/env python3
"""
üö® GitHub Workflow Emergency Doctor
===================================

D√©tecte et arr√™te automatiquement les workflows d√©fectueux
Cr√©e des issues GitHub pour traitement diff√©r√©
"""

import subprocess
import json
import datetime
import sys
import os

class GitHubWorkflowEmergencyDoctor:
    def __init__(self):
        self.repo = "stephanedenis/PaniniFS"
        self.emergency_threshold = 3  # 3 √©checs = urgence
        self.disabled_workflows = []
        self.failed_runs = []
        
    def get_failed_runs(self):
        """R√©cup√®re les runs en √©chec r√©cents"""
        try:
            cmd = [
                "gh", "run", "list", 
                "--limit", "50",
                "--json", "status,conclusion,name,workflowName,createdAt,id"
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                runs = json.loads(result.stdout)
                
                # Filtre les √©checs r√©cents (derni√®res 24h)
                now = datetime.datetime.now()
                failed_runs = []
                
                for run in runs:
                    if run.get('conclusion') == 'failure':
                        created = datetime.datetime.fromisoformat(
                            run['createdAt'].replace('Z', '+00:00')
                        )
                        
                        # Si √©chec dans les derni√®res 24h
                        if (now - created.replace(tzinfo=None)).days < 1:
                            failed_runs.append(run)
                
                return failed_runs
            
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration runs: {e}")
            return []
    
    def analyze_failure_patterns(self, failed_runs):
        """Analyse les patterns d'√©chec par workflow"""
        workflow_failures = {}
        
        for run in failed_runs:
            workflow = run.get('workflowName', 'unknown')
            
            if workflow not in workflow_failures:
                workflow_failures[workflow] = []
            
            workflow_failures[workflow].append(run)
        
        # Identifie les workflows critiques (‚â•3 √©checs)
        critical_workflows = {}
        for workflow, runs in workflow_failures.items():
            if len(runs) >= self.emergency_threshold:
                critical_workflows[workflow] = runs
        
        return critical_workflows
    
    def disable_critical_workflows(self, critical_workflows):
        """D√©sactive les workflows critiques"""
        for workflow_name, runs in critical_workflows.items():
            print(f"üõë Workflow critique d√©tect√©: {workflow_name}")
            print(f"   {len(runs)} √©checs r√©cents")
            
            # Tente de d√©sactiver le workflow
            try:
                # Recherche le fichier workflow
                for run in runs:
                    if 'path' in run:
                        workflow_path = run['path']
                        break
                else:
                    # Devine le path bas√© sur le nom
                    workflow_path = f".github/workflows/{workflow_name.lower().replace(' ', '-')}.yml"
                
                # D√©sactive le workflow
                cmd = ["gh", "workflow", "disable", workflow_path]
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"‚úÖ Workflow d√©sactiv√©: {workflow_path}")
                    self.disabled_workflows.append({
                        'name': workflow_name,
                        'path': workflow_path,
                        'failures': len(runs),
                        'disabled_at': datetime.datetime.now().isoformat()
                    })
                else:
                    print(f"‚ö†Ô∏è √âchec d√©sactivation {workflow_path}: {result.stderr}")
                    
            except Exception as e:
                print(f"‚ùå Erreur d√©sactivation {workflow_name}: {e}")
    
    def create_github_issue(self):
        """Cr√©e une issue GitHub pour le traitement diff√©r√©"""
        if not self.disabled_workflows:
            return
            
        title = f"üö® URGENT: Workflows d√©sactiv√©s automatiquement - {datetime.date.today()}"
        
        body = f"""# üö® Intervention d'urgence - Workflows d√©fectueux

## üìä R√©sum√©
Le GitHub Workflow Emergency Doctor a d√©tect√© et d√©sactiv√© automatiquement des workflows d√©fectueux.

## üõë Workflows d√©sactiv√©s ({len(self.disabled_workflows)})

"""
        
        for workflow in self.disabled_workflows:
            body += f"""### {workflow['name']}
- **Path**: `{workflow['path']}`
- **√âchecs**: {workflow['failures']} en 24h
- **D√©sactiv√©**: {workflow['disabled_at']}

"""
        
        body += f"""
## üéØ Actions requises

### 1. Diagnostic imm√©diat
- [ ] Analyser les logs d'√©chec de chaque workflow
- [ ] Identifier la cause racine (configuration, d√©pendances, etc.)
- [ ] V√©rifier l'√©tat des services externes (GitHub Pages, DNS, etc.)

### 2. R√©paration
- [ ] Corriger les configurations d√©fectueuses
- [ ] Tester les workflows en local si possible
- [ ] Mettre √† jour les d√©pendances si n√©cessaire

### 3. R√©activation
- [ ] R√©activer les workflows corrig√©s
- [ ] Surveiller les nouveaux runs
- [ ] Ajuster le seuil d'urgence si n√©cessaire

## üèïÔ∏è Impact Camping Strategy
Ces √©checs bloquent le d√©ploiement automatique. Priority absolue pour la deadline du 30 ao√ªt.

## ü§ñ Automatisation
- **Seuil d'urgence**: {self.emergency_threshold} √©checs/24h
- **Doctor script**: `github_workflow_emergency_doctor.py`
- **Intervention**: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìã Linked Issues
- Epic #9: Camping Strategy - Externalisation Compl√®te
- Issue #10: Colab Deployment Center (requis pour monitoring)
"""
        
        # Cr√©e l'issue
        try:
            cmd = [
                "gh", "issue", "create",
                "--title", title,
                "--body", body,
                "--label", "camping-strategy,priority-critical,workflow-failure"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                issue_url = result.stdout.strip()
                print(f"‚úÖ Issue cr√©√©e: {issue_url}")
                return issue_url
            else:
                print(f"‚ùå Erreur cr√©ation issue: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation issue: {e}")
    
    def run_emergency_intervention(self):
        """Lance l'intervention d'urgence compl√®te"""
        print("üö® GITHUB WORKFLOW EMERGENCY DOCTOR")
        print("===================================")
        print(f"‚è∞ {datetime.datetime.now()}")
        print("")
        
        # 1. R√©cup√®re les √©checs r√©cents
        print("üîç Analyse des √©checs r√©cents...")
        failed_runs = self.get_failed_runs()
        if not failed_runs:
            print("‚úÖ Aucun √©chec r√©cent d√©tect√©")
            return
        
        print(f"üìä {len(failed_runs)} runs en √©chec trouv√©s")
        
        # 2. Analyse les patterns
        print("\nüî¨ Analyse des patterns d'√©chec...")
        critical_workflows = self.analyze_failure_patterns(failed_runs)
        
        if not critical_workflows:
            print("‚úÖ Aucun workflow critique d√©tect√©")
            return
        
        print(f"üö® {len(critical_workflows)} workflows critiques identifi√©s")
        
        # 3. D√©sactive les workflows critiques
        print("\nüõë D√©sactivation des workflows critiques...")
        self.disable_critical_workflows(critical_workflows)
        
        # 4. Cr√©e l'issue GitHub
        print("\nüìã Cr√©ation issue GitHub...")
        issue_url = self.create_github_issue()
        
        # 5. R√©sum√© final
        print("\nüéØ INTERVENTION TERMIN√âE")
        print("======================")
        print(f"üõë Workflows d√©sactiv√©s: {len(self.disabled_workflows)}")
        if issue_url:
            print(f"üìã Issue GitHub: {issue_url}")
        print("")
        print("üèïÔ∏è Les workflows sont stabilis√©s pour la Camping Strategy")
        print("‚ö†Ô∏è Traitement diff√©r√© requis via l'issue cr√©√©e")

def main():
    doctor = GitHubWorkflowEmergencyDoctor()
    doctor.run_emergency_intervention()

if __name__ == "__main__":
    main()
