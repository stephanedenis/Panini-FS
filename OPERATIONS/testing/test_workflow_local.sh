#!/bin/bash
#
# üß™ TEST WORKFLOW LOCAL - SIMULATION GITHUB ACTIONS
# ==================================================
#
# Simule localement l'ex√©cution du workflow deploy-docs.yml
# pour d√©tecter les probl√®mes AVANT qu'ils ne causent des √©checs.
#

set -euo pipefail

echo "üß™ TEST WORKFLOW LOCAL - Simulation GitHub Actions"
echo "=================================================="

# Configuration
BASE_DIR="/home/stephane/GitHub/PaniniFS-1"
TEST_DIR="$BASE_DIR/TEST_WORKFLOW_OUTPUT"
LOG_FILE="$TEST_DIR/workflow_test.log"

# Couleurs pour la sortie
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log avec couleurs
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $message" | tee -a "$LOG_FILE" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} $message" | tee -a "$LOG_FILE" ;;
        "WARNING") echo -e "${YELLOW}[WARNING]${NC} $message" | tee -a "$LOG_FILE" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $message" | tee -a "$LOG_FILE" ;;
        *) echo "[$timestamp] $message" | tee -a "$LOG_FILE" ;;
    esac
}

# Nettoyage et pr√©paration
log "INFO" "üßπ Pr√©paration environnement de test..."
rm -rf "$TEST_DIR"
mkdir -p "$TEST_DIR"
cd "$BASE_DIR"

# Simulation √©tape 1: Checkout (d√©j√† fait localement)
log "INFO" "üì• √âtape 1: Checkout (simulation locale)"
log "SUCCESS" "Checkout simul√© - nous sommes d√©j√† dans le repo"

# Simulation √©tape 2: Setup Python
log "INFO" "üêç √âtape 2: Setup Python"
python_version=$(python3 --version 2>&1 || echo "Python non trouv√©")
log "INFO" "Version Python d√©tect√©e: $python_version"

if ! command -v python3 &> /dev/null; then
    log "ERROR" "Python3 non trouv√© - √©chec attendu sur GitHub Actions"
    exit 1
fi

# Simulation √©tape 3: Install dependencies
log "INFO" "üì¶ √âtape 3: Installation d√©pendances"

# Test en environnement isol√©
log "INFO" "Cr√©ation environnement virtuel temporaire..."
python3 -m venv "$TEST_DIR/venv" || {
    log "ERROR" "Impossible de cr√©er l'environnement virtuel"
    exit 1
}

source "$TEST_DIR/venv/bin/activate"

log "INFO" "Installation mkdocs-material..."
if pip install mkdocs-material 2>&1 | tee -a "$LOG_FILE"; then
    log "SUCCESS" "mkdocs-material install√©"
else
    log "ERROR" "√âchec installation mkdocs-material"
    exit 1
fi

log "INFO" "Installation mkdocs-git-revision-date-localized-plugin..."
if pip install mkdocs-git-revision-date-localized-plugin 2>&1 | tee -a "$LOG_FILE"; then
    log "SUCCESS" "Plugin git-revision install√©"
else
    log "ERROR" "√âchec installation plugin git-revision"
    exit 1
fi

# Simulation √©tape 4: Build site
log "INFO" "üèóÔ∏è √âtape 4: Build site MkDocs"

# V√©rifier pr√©sence mkdocs.yml
if [[ ! -f "mkdocs.yml" ]]; then
    log "ERROR" "mkdocs.yml non trouv√©"
    exit 1
fi

# V√©rifier pr√©sence docs_new
if [[ ! -d "docs_new" ]]; then
    log "ERROR" "R√©pertoire docs_new non trouv√©"
    exit 1
fi

log "INFO" "Lancement mkdocs build..."
if mkdocs build --config-file mkdocs.yml --site-dir "$TEST_DIR/site" 2>&1 | tee -a "$LOG_FILE"; then
    log "SUCCESS" "Build MkDocs r√©ussi"
    
    # V√©rifier contenu g√©n√©r√©
    if [[ -f "$TEST_DIR/site/index.html" ]]; then
        log "SUCCESS" "index.html g√©n√©r√©"
    else
        log "WARNING" "index.html non trouv√© dans le site g√©n√©r√©"
    fi
    
    if [[ -f "$TEST_DIR/site/dashboard/index.html" ]]; then
        log "SUCCESS" "Dashboard g√©n√©r√©"
    else
        log "WARNING" "Dashboard non trouv√©"
    fi
    
    # Taille du site
    site_size=$(du -sh "$TEST_DIR/site" | cut -f1)
    log "INFO" "Taille du site g√©n√©r√©: $site_size"
    
else
    log "ERROR" "√âchec build MkDocs"
    
    # Diagnostic d√©taill√© en cas d'√©chec
    log "INFO" "üîç DIAGNOSTIC D√âTAILL√â:"
    log "INFO" "Contenu docs_new/:"
    ls -la docs_new/ | tee -a "$LOG_FILE"
    
    log "INFO" "Contenu mkdocs.yml (10 premi√®res lignes):"
    head -10 mkdocs.yml | tee -a "$LOG_FILE"
    
    exit 1
fi

# Simulation √©tape 5: Test du r√©sultat
log "INFO" "üß™ √âtape 5: Tests de validation"

# Test 1: V√©rifier structure HTML
if grep -q "PaniniFS" "$TEST_DIR/site/index.html" 2>/dev/null; then
    log "SUCCESS" "Contenu PaniniFS trouv√© dans index.html"
else
    log "WARNING" "Contenu PaniniFS non trouv√© dans index.html"
fi

# Test 2: V√©rifier pr√©sence dashboard
if [[ -d "$TEST_DIR/site/dashboard" ]]; then
    log "SUCCESS" "R√©pertoire dashboard cr√©√©"
else
    log "WARNING" "R√©pertoire dashboard manquant"
fi

# Test 3: V√©rifier JSON monitoring
if [[ -f "$TEST_DIR/site/data/system_status.json" ]]; then
    log "SUCCESS" "Fichier monitoring JSON pr√©sent"
else
    log "WARNING" "Fichier monitoring JSON manquant"
fi

# Simulation √©tape 6: Deploy (simulation)
log "INFO" "üöÄ √âtape 6: Deploy (simulation)"
log "INFO" "En production: peaceiris/actions-gh-pages@v3 serait utilis√©"
log "INFO" "Fichiers √† d√©ployer:"
find "$TEST_DIR/site" -name "*.html" | head -10 | tee -a "$LOG_FILE"

# D√©sactiver environnement virtuel
deactivate

# Rapport final
log "INFO" "üìã RAPPORT FINAL"
echo "===================="

if [[ -f "$TEST_DIR/site/index.html" ]]; then
    log "SUCCESS" "‚úÖ WORKFLOW DEVRAIT R√âUSSIR"
    log "INFO" "Toutes les √©tapes ont √©t√© simul√©es avec succ√®s"
    log "INFO" "Site g√©n√©r√© dans: $TEST_DIR/site/"
    
    echo ""
    log "INFO" "üåê PREVIEW LOCAL POSSIBLE:"
    echo "cd $TEST_DIR/site && python3 -m http.server 8000"
    echo "Puis ouvrir: http://localhost:8000"
    
else
    log "ERROR" "‚ùå WORKFLOW VA PROBABLEMENT √âCHOUER"
    log "ERROR" "Des probl√®mes ont √©t√© d√©tect√©s"
fi

echo ""
log "INFO" "üìÑ Log d√©taill√©: $LOG_FILE"
log "INFO" "üóÇÔ∏è Art√©facts test: $TEST_DIR/"

echo ""
log "INFO" "üèïÔ∏è CAMPING STRATEGY: Test local termin√©"
log "INFO" "Vous pouvez maintenant pousser en confiance !"

exit 0
