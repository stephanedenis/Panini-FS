name: 🔬 Validation Dhātu Research

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'RESEARCH/**'
      - 'CORE/semantic-analyzer/**'
      - 'CORE/panini-fs/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'RESEARCH/**'
      - 'CORE/semantic-analyzer/**'
      - 'CORE/panini-fs/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  dhatu-validation:
    name: 🧬 Validate 7 Dhātu Universals
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pytest numpy pandas nltk
        
    - name: 🔧 Rust format check
      run: |
        cd CORE/panini-fs
        cargo fmt --all -- --check
        
    - name: 🔍 Rust lint (Clippy)
      run: |
        cd CORE/panini-fs
        cargo clippy --all-targets --all-features -- -D warnings
        
    - name: 🏗️ Build PaniniFS Core
      run: |
        cd CORE/panini-fs
        cargo build --verbose
        
    - name: ✅ Test PaniniFS Core
      run: |
        cd CORE/panini-fs
        cargo test --verbose
        
    - name: 🧬 Validate Dhātu Detection
      run: |
        cd CORE/semantic-analyzer
        python dhatu-detector/dhatu_detector.py --test
        
    - name: 📊 Run Research Validation
      run: |
        cd RESEARCH
        python -m pytest tests/ -v --tb=short
        
    - name: 📈 Generate Coverage Report
      run: |
        cd CORE/panini-fs
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml
        
    - name: 📤 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./CORE/panini-fs/cobertura.xml
        flags: rust-core
        
  semantic-benchmarks:
    name: 📊 Semantic Compression Benchmarks
    runs-on: ubuntu-latest
    needs: dhatu-validation
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🦀 Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: 🏃‍♂️ Run Performance Benchmarks
      run: |
        cd CORE/panini-fs
        cargo bench
        
    - name: 📊 Compression Ratio Analysis
      run: |
        cd CORE/semantic-analyzer
        python -c "
        import sys, os
        sys.path.append('.')
        from dhatu_detector import analyze_compression_ratio
        ratio = analyze_compression_ratio('samples/')
        print(f'Compression ratio: {ratio}%')
        if ratio < 50:
            sys.exit(1)
        "
        
  research-validation:
    name: 🔬 Research Reproducibility
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[research]')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python Research Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Research Dependencies
      run: |
        pip install jupyter pandas matplotlib seaborn scipy
        pip install nltk spacy transformers
        
    - name: 🔬 Execute Research Notebooks
      run: |
        cd RESEARCH
        jupyter nbconvert --execute --to notebook \
          --inplace discoveries/**/*.ipynb
          
    - name: ✅ Validate Research Reproducibility
      run: |
        cd RESEARCH
        python scripts/validate_reproducibility.py
        
  publication-update:
    name: 📚 Auto-Update Publications
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📝 Generate Publication Updates
      run: |
        cd ECOSYSTEM/publication-engine
        python publication_generator.py --auto-update
        
    - name: 🚀 Trigger Publication Workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh workflow run publication-sync.yml \
          --field version="${{ github.ref_name }}"
