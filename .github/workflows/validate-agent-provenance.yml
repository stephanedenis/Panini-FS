name: Validate PR Agent Provenance

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]

permissions:
  contents: read
  pull-requests: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure PR has parsable provenance metadata or is exempted
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = (pr.labels || []).map(l => l.name);
            const REQUIRED = ['host','pid','agent','model','owner'];
            if (labels.includes('copilotage-exempt')) {
              core.notice('Bypass via label copilotage-exempt');
              return;
            }
            const prov = labels.find(n => /^provenance:/i.test(n));
            if (!prov) {
              core.setFailed('Label requis: provenance:host=…,pid=…,agent=…,model=…,owner=…');
              return;
            }
            const kvpairs = prov.replace(/^provenance:/i,'').split(/[\,\s]+/).filter(Boolean);
            const obj = {};
            for (const p of kvpairs) {
              const i = p.indexOf('=');
              if (i === -1) continue;
              const k = p.slice(0, i).trim();
              const v = p.slice(i + 1).trim();
              if (k) obj[k] = v;
            }
            if (obj.pid && /^\d+$/.test(String(obj.pid))) obj.pid = Number(obj.pid);
            const missing = REQUIRED.filter(k => !(k in obj) || String(obj[k]).length === 0);
            if (missing.length) {
              core.setFailed('Champs manquants dans le label provenance: ' + missing.join(', '));
              return;
            }
            core.info('Provenance OK: ' + prov);
