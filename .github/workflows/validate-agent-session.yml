name: Validate PR Agent Provenance Metadata

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]

permissions:
  contents: read
  pull-requests: read

      - name: Ensure PR has parsable provenance metadata or is exempted
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = (pr.labels || []).map(l => l.name);
            const REQUIRED_KEYS = ['host','pid','agent','model','owner'];

            function ok(msg) {
              core.info(msg);
            }

            function fail(msg) {
              core.setFailed(msg + '\n\nFormat requis:\n' +
                '- Label unique: "provenance:host=totoro,pid=163849,agent=GitHubCopilot,model=GPT-5,owner=agent"\n' +
                '\nAstuce: ajoutez le label "copilotage-exempt" pour bypass ponctuel.');
            }

            function hasAllKeys(obj) {
              return REQUIRED_KEYS.every(k => Object.prototype.hasOwnProperty.call(obj, k) && String(obj[k]).length > 0);
            }

            function parseKVP(labelName) {
              // Expect: provenance:host=totoro,pid=163849,agent=GitHubCopilot,model=GPT-5,owner=agent
              const m = labelName.match(/^provenance:(.*)$/);
              if (!m) return null;
              const kvp = m[1];
              const obj = {};
              kvp.split(/[\,\s]+/).forEach(pair => {
                if (!pair) return;
                const idx = pair.indexOf('=');
                if (idx === -1) return;
                const k = pair.slice(0, idx).trim();
                const v = pair.slice(idx + 1).trim();
                if (k) obj[k] = v;
              });
              // Normalize pid as number if possible
              if (obj.pid && /^\d+$/.test(String(obj.pid))) obj.pid = Number(obj.pid);
              return obj;
            }

            const exempt = labels.includes('copilotage-exempt');
            if (exempt) {
              ok('Bypass enabled via label copilotage-exempt.');
              return;
            }

            // Expect a single parsable label starting with "provenance:"
            const provLike = labels.find(n => n.toLowerCase().startsWith('provenance:'));
            if (provLike) {
              const parsed = parseKVP(provLike);
              if (parsed && hasAllKeys(parsed)) {
                ok('Validation OK: métadonnées parsées depuis le label unique "' + provLike + '".');
                return;
              }
            }

            fail('Métadonnées de session manquantes ou incomplètes.');
              }
            }

            fail('Métadonnées de session manquantes ou incomplètes.');