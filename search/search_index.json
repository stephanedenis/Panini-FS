{"config":{"lang":["fr","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P\u0101\u1e47ini File System","text":"<p>Plateforme modulaire pour traitement et stockage d\u2019information m\u00e9talinguistique.</p> <ul> <li>Vision: Fondations linguistiques, Cadre Dh\u0101tu</li> <li>Architecture: Architecture globale, Orchestrateur d\u2019ex\u00e9cution</li> <li>Documentation: Processus, Style, R\u00e9f\u00e9rences</li> <li>Sch\u00e9mas: Diagrams (PlantUML)</li> <li>Modules: Index docs modules</li> </ul> <p>Actualit\u00e9s: - La documentation est d\u00e9sormais la source prioritaire; les t\u00e2ches GitHub sont extraites automatiquement des TODO: de cette doc. - Le site est bilingue FR/EN (menu English).</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Modules principaux:</p> <ul> <li>semantic-core \u2014 traitement s\u00e9mantique</li> <li>execution-orchestrator \u2014 drivers (local/colab/cloud), <code>missions/</code></li> <li>publication-engine \u2014 g\u00e9n\u00e9ration de publications</li> <li>datasets-ingestion \u2014 ingestion de donn\u00e9es</li> <li>attribution-registry \u2014 attribution et tra\u00e7abilit\u00e9</li> </ul> <p>Principe: s\u00e9paration nette (contrats, tests), CI par module, documentation commune.</p>"},{"location":"dashboard/","title":"\ud83c\udfd5\ufe0f Dashboard Camping Strategy","text":"<p>Mode Camping Actif</p> <p>Totoro: Terminal minimal + VS Code + GitHub Copilot Cloud: Colab Master + GitHub Actions + Vercel Monitoring: Temps r\u00e9el via JSON + MkDocs</p>"},{"location":"dashboard/#etat-systeme-en-temps-reel","title":"\ud83d\udcca \u00c9tat Syst\u00e8me en Temps R\u00e9el","text":"<p>\u23f3 Chargement de l'\u00e9tat du syst\u00e8me...</p>"},{"location":"dashboard/#agents-autonomes","title":"\ud83e\udd16 Agents Autonomes","text":""},{"location":"dashboard/#domaines-multi-sites","title":"\ud83c\udf10 Domaines Multi-Sites","text":""},{"location":"dashboard/#workflows-github","title":"\ud83d\udd27 Workflows GitHub","text":""},{"location":"dashboard/#liens-rapides","title":"\ud83d\udd17 Liens Rapides","text":"<ul> <li>\u2601\ufe0f Colab Master Orchestrator</li> <li>\ud83d\udd27 GitHub Actions</li> <li>\ud83d\udcf1 Repository GitHub</li> <li>\u2699\ufe0f GitHub Pages Settings</li> </ul>"},{"location":"dhatu-framework/","title":"Cadre Dh\u0101tu","text":"<p>Atomes conceptuels (indicatifs):</p> <ul> <li>COMM \u2014 communiquer</li> <li>ITER \u2014 r\u00e9p\u00e9ter</li> <li>TRANS \u2014 transformer</li> <li>DECIDE \u2014 d\u00e9cider</li> <li>LOCATE \u2014 localiser</li> <li>GROUP \u2014 rassembler</li> <li>SEQ \u2014 s\u00e9quencer</li> </ul> <p>Objectif: adresser et d\u00e9dupliquer par le sens. Voir Fondations et R\u00e9f\u00e9rences.</p>"},{"location":"diagrams/","title":"Sch\u00e9mas (PlantUML via Kroki)","text":"<p>Ce projet rend les sch\u00e9mas \u00e0 partir de diagram-as-code en SVG, avec hyperliens cliquables.</p> <p>Exemple PlantUML avec liens:</p> <pre><code>@startuml\nskinparam linetype ortho\nskinparam defaultFontName Roboto\nskinparam ArrowColor #1976D2\nskinparam RectangleFontStyle bold\n\nrectangle \"[[https://paninifs.org Accueil]]\" as Home #lightblue\nrectangle \"[[https://github.com/stephanedenis/PaniniFS Repo]]\" as Repo #lightgreen\nrectangle \"[[/specs/execution-orchestrator/ Orchestrateur]]\" as Orchestrator #lightyellow\n\nHome --&gt; Repo : code\nHome --&gt; Orchestrator : specs\nRepo --&gt; Orchestrator : submodule\n@enduml\n</code></pre> <p>Notes: - Les liens PlantUML <code>[[url label]]</code> sont transform\u00e9s en liens SVG. - Mermaid est aussi support\u00e9 via superfences.</p>"},{"location":"doc-process/","title":"Processus documentation (docs as code)","text":"<ul> <li>Source unique: <code>docs_new/</code> (FR par d\u00e9faut) + <code>docs_new/en/</code>.</li> <li>Synchronisation FR/EN: toute PR modifiant une page FR doit modifier la page EN correspondante (et inversement).</li> <li>Plugin i18n (MkDocs): navigation bilingue, URLs <code>/</code> et <code>/en/</code>.</li> <li>Revue: au moins 1 relecteur; v\u00e9rifier coh\u00e9rence des deux langues.</li> <li>Style: voir Guide de style.</li> <li>Sch\u00e9mas: privil\u00e9gier PlantUML/Mermaid (via Kroki) avec SVG et hyperliens.</li> <li>Gouvernance: les TODO: dans la doc cr\u00e9ent/mettent \u00e0 jour des issues (workflow CI).</li> </ul>"},{"location":"linguistic-foundations/","title":"Fondations linguistiques","text":"<ul> <li>P\u0101\u1e47ini et la grammaire formelle comme inspiration pour une repr\u00e9sentation compacte et op\u00e9rationnelle du sens.</li> <li>Lien entre unit\u00e9s linguistiques primitives et op\u00e9rations d\u2019ing\u00e9nierie (contrats clairs, testables).</li> <li>Alignement avec les pratiques existantes (grammaires formelles, typage, s\u00e9mantique op\u00e9rationnelle).</li> </ul> <p>Guides: garder des d\u00e9finitions minimales, r\u00e9f\u00e9rencer des sources externes et indiquer la correspondance avec le syst\u00e8me PaniniFS.</p>"},{"location":"monitoring-guide/","title":"\ud83c\udfd5\ufe0f Guide Monitoring Dynamique PaniniFS","text":""},{"location":"monitoring-guide/#vue-densemble","title":"\ud83d\udcca Vue d'ensemble","text":"<p>Le syst\u00e8me de monitoring dynamique PaniniFS offre une surveillance en temps r\u00e9el de l'\u00e9cosyst\u00e8me complet :</p> <ul> <li>13+ Agents autonomes r\u00e9partis en 5 cat\u00e9gories</li> <li>5 Domaines multi-sites avec DNS configur\u00e9  </li> <li>Workflows GitHub avec auto-r\u00e9paration</li> <li>Camping Strategy avec mode Totoro minimal</li> <li>Statut JSON mis \u00e0 jour automatiquement</li> </ul>"},{"location":"monitoring-guide/#acces-dashboard","title":"\ud83c\udf10 Acc\u00e8s Dashboard","text":""},{"location":"monitoring-guide/#url-principales","title":"URL principales","text":"<ul> <li>Production: https://paninifs.org/dashboard/</li> <li>GitHub Pages: https://paninifs.org/dashboard/</li> <li>Donn\u00e9es JSON: https://paninifs.org/data/system_status.json</li> </ul>"},{"location":"monitoring-guide/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":"<ul> <li>\u2705 Auto-refresh toutes les 30 secondes</li> <li>\ud83d\udcca Vue temps r\u00e9el des agents</li> <li>\ud83c\udf10 Monitoring multi-domaines</li> <li>\u26a1 Statut workflows GitHub</li> <li>\ud83c\udfd5\ufe0f Camping strategy status</li> </ul>"},{"location":"monitoring-guide/#architecture-technique","title":"\ud83d\udd27 Architecture Technique","text":""},{"location":"monitoring-guide/#structure-fichiers","title":"Structure fichiers","text":"<pre><code>docs_new/\n\u251c\u2500\u2500 dashboard.md           # Page dashboard MkDocs avec JavaScript\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 system_status.json # Donn\u00e9es temps r\u00e9el (auto-g\u00e9n\u00e9r\u00e9es)\n\u2514\u2500\u2500 ...\n\nOPERATIONS/monitoring/scripts/\n\u251c\u2500\u2500 update_system_status.py     # Mise \u00e0 jour manuelle\n\u251c\u2500\u2500 auto_update_monitoring.sh   # Automation (cron)\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"monitoring-guide/#integration-mkdocs","title":"Int\u00e9gration MkDocs","text":"<ul> <li>Th\u00e8me: Material Design</li> <li>Navigation: Ajout \ud83c\udfd5\ufe0f Dashboard</li> <li>JavaScript: Chargement dynamique JSON</li> <li>Responsive: Compatible mobile</li> </ul>"},{"location":"monitoring-guide/#mise-a-jour-automatique","title":"\ud83e\udd16 Mise \u00e0 jour automatique","text":""},{"location":"monitoring-guide/#manuel","title":"Manuel","text":"<pre><code># Mise \u00e0 jour imm\u00e9diate\npython3 OPERATIONS/monitoring/scripts/update_system_status.py\n\n# D\u00e9ploiement complet\n./deploy_dynamic_monitoring.sh\n</code></pre>"},{"location":"monitoring-guide/#automatisation-cron","title":"Automatisation (Cron)","text":"<pre><code># Ajouter \u00e0 crontab pour mise \u00e0 jour toutes les 15 minutes\n*/15 * * * * /home/stephane/GitHub/PaniniFS-1/OPERATIONS/monitoring/scripts/auto_update_monitoring.sh\n\n# Installation cron\ncrontab -e\n# Ajouter la ligne ci-dessus\n</code></pre>"},{"location":"monitoring-guide/#variables-denvironnement","title":"Variables d'environnement","text":"<pre><code># Optionnel pour API GitHub (workflows)\nexport GITHUB_TOKEN=\"your_token_here\"\n</code></pre>"},{"location":"monitoring-guide/#structure-donnees-json","title":"\ud83d\udcca Structure donn\u00e9es JSON","text":""},{"location":"monitoring-guide/#system_statusjson","title":"system_status.json","text":"<pre><code>{\n  \"timestamp\": \"2025-08-22T15:55:44.177940+00:00\",\n  \"camping_strategy\": {\n    \"active\": true,\n    \"totoro_mode\": \"minimal\",\n    \"cloud_services\": {...}\n  },\n  \"agents\": {\n    \"total_count\": 13,\n    \"active_count\": 13,\n    \"agents\": [...],\n    \"categories\": {...}\n  },\n  \"workflows\": {...},\n  \"domains\": {...},\n  \"system_health\": {...}\n}\n</code></pre>"},{"location":"monitoring-guide/#monitoring-complet","title":"\ud83d\udd0d Monitoring complet","text":""},{"location":"monitoring-guide/#agents-surveilles","title":"Agents surveill\u00e9s","text":"<ol> <li>Research (2): Theoretical, Empirical</li> <li>Critique (2): Adversarial, Simple  </li> <li>Orchestrators (3): GitHub, Simple, Continuous</li> <li>Monitoring (4): Domain, Workflow, System, Health</li> <li>DevOps (2): Deployment, Infrastructure</li> </ol>"},{"location":"monitoring-guide/#domaines-monitored","title":"Domaines monitored","text":"<ul> <li>paninifs.com - Site principal</li> <li>o-tomate.com - Interface cr\u00e9ative</li> <li>stephanedenis.cc - Portfolio personnel  </li> <li>sdenis.net - Domaine court</li> <li>paninifs.org - Documentation officielle</li> </ul>"},{"location":"monitoring-guide/#workflows-github","title":"Workflows GitHub","text":"<ul> <li>\u2705 Deployment workflows</li> <li>\ud83d\udd27 Auto-repair syst\u00e8me</li> <li>\ud83d\udccb Tests automatis\u00e9s</li> <li>\ud83d\udee1\ufe0f Security scans</li> </ul>"},{"location":"monitoring-guide/#camping-strategy-integration","title":"\ud83c\udfd5\ufe0f Camping Strategy Integration","text":""},{"location":"monitoring-guide/#mode-totoro","title":"Mode Totoro","text":"<ul> <li>Minimal infrastructure - Services essentiels uniquement</li> <li>Cloud services - D\u00e9l\u00e9gation maximale (Colab, GitHub, Vercel)</li> <li>Zero maintenance - Automatisation compl\u00e8te</li> <li>Resilient monitoring - Fonctionnement autonome</li> </ul>"},{"location":"monitoring-guide/#services-externalises","title":"Services externalis\u00e9s","text":"<ul> <li>Colab Master - D\u00e9veloppement principal</li> <li>GitHub Actions - CI/CD automatis\u00e9</li> <li>Vercel - D\u00e9ploiement frontend  </li> <li>GitHub Pages - Documentation MkDocs</li> </ul>"},{"location":"monitoring-guide/#deploiement-et-maintenance","title":"\ud83d\ude80 D\u00e9ploiement et maintenance","text":""},{"location":"monitoring-guide/#deploiement-initial","title":"D\u00e9ploiement initial","text":"<pre><code># 1. D\u00e9ployer syst\u00e8me complet\n./deploy_dynamic_monitoring.sh\n\n# 2. V\u00e9rifier d\u00e9ploiement\ncurl -s https://paninifs.org/data/system_status.json | jq .\n\n# 3. Configurer automation (optionnel)\n./OPERATIONS/monitoring/scripts/auto_update_monitoring.sh\n</code></pre>"},{"location":"monitoring-guide/#maintenance","title":"Maintenance","text":"<ul> <li>\ud83d\udd04 Auto-update via script p\u00e9riodique</li> <li>\ud83d\udcca Dashboard accessible 24/7</li> <li>\ud83c\udfd5\ufe0f Camping mode - maintenance minimale</li> <li>\ud83e\udd16 Agents g\u00e8rent l'\u00e9cosyst\u00e8me</li> </ul>"},{"location":"monitoring-guide/#metriques-et-analytics","title":"\ud83d\udcc8 M\u00e9triques et analytics","text":""},{"location":"monitoring-guide/#kpis-surveilles","title":"KPIs surveill\u00e9s","text":"<ul> <li>Uptime domaines (%)</li> <li>Agent health (count active)</li> <li>Workflow success rate (%)</li> <li>Response time monitoring (ms)</li> <li>Error rate tracking (%)</li> </ul>"},{"location":"monitoring-guide/#alertes-automatiques","title":"Alertes automatiques","text":"<ul> <li>Domain down d\u00e9tection</li> <li>Workflow failures</li> <li>Agent inactivity  </li> <li>System health degradation</li> </ul>"},{"location":"monitoring-guide/#securite-et-acces","title":"\ud83d\udd10 S\u00e9curit\u00e9 et acc\u00e8s","text":""},{"location":"monitoring-guide/#controles-dacces","title":"Contr\u00f4les d'acc\u00e8s","text":"<ul> <li>Lecture publique - Dashboard accessible</li> <li>\u00c9criture contr\u00f4l\u00e9e - Via scripts authentifi\u00e9s</li> <li>GitHub integration - Token s\u00e9curis\u00e9</li> <li>Domain security - HTTPS obligatoire</li> </ul>"},{"location":"monitoring-guide/#backup-et-resilience","title":"Backup et resilience","text":"<ul> <li>Multiple domains - Redondance DNS</li> <li>GitHub backup - Code versionn\u00e9</li> <li>JSON versioning - Historique automatique</li> <li>Cloud distribution - CDN GitHub Pages</li> </ul> <p>\ud83c\udfd5\ufe0f Camping Strategy: Infrastructure externalis\u00e9e, monitoring autonome, maintenance minimale \ud83d\udcca Live Dashboard: https://paninifs.org/dashboard/ \ud83e\udd16 13+ Agents: \u00c9cosyst\u00e8me compl\u00e8tement autonome</p>"},{"location":"references/","title":"R\u00e9f\u00e9rences externes","text":"<ul> <li>P\u0101\u1e47ini \u2014 Asht\u0101dhy\u0101y\u012b (grammaire sanskrite)</li> <li>Formal grammars, operational semantics \u2014 manuels de r\u00e9f\u00e9rence</li> <li>MkDocs Material, mkdocs-static-i18n</li> <li>Python Typer, packaging</li> <li>Git, GitHub Actions</li> </ul>"},{"location":"style-guide/","title":"Guide de style","text":"<ul> <li>Clart\u00e9 et concision; privil\u00e9gier les r\u00e9f\u00e9rences externes pour les notions standard.</li> <li>Titres align\u00e9s FR/EN; m\u00eames ancres et structure.</li> <li>Exemples courts, reproductibles; blocs de code annot\u00e9s.</li> <li>Terminologie: conserver les noms propres (P\u0101\u1e47ini, Dh\u0101tu), expliquer \u00e0 la premi\u00e8re occurrence.</li> </ul>"},{"location":"vision/","title":"Vision","text":"<p>PaniniFS vise un syst\u00e8me de fichiers s\u00e9mantique o\u00f9 le sens prime sur la forme.</p> <ul> <li>Priorit\u00e9 au cadre linguistique-informatique (le \u00ab quoi \u00bb) avant la mise en \u0153uvre (le \u00ab comment \u00bb).</li> <li>Documentation \u00ab docs as code \u00bb, bilingue FR/EN, synchronis\u00e9e page \u00e0 page.</li> <li>R\u00e9f\u00e9rences externes privil\u00e9gi\u00e9es pour les concepts standards (ne pas r\u00e9inventer les roues).</li> </ul> <p>Voir aussi: Fondations linguistiques, Cadre Dh\u0101tu, Architecture.</p>"},{"location":"en/","title":"P\u0101\u1e47ini File System","text":"<p>Modular platform for metalinguistic information processing and storage.</p> <ul> <li>Vision: Linguistic Foundations, Dh\u0101tu Framework</li> <li>Architecture: System Architecture, Execution Orchestrator</li> <li>Documentation: Process, Style, References</li> <li>Diagrams: Diagrams (PlantUML)</li> <li>Modules: Modules docs index</li> </ul> <p>News: - Documentation is now the primary source; GitHub tasks are extracted automatically from TODO: in this doc. - The site is bilingual FR/EN (English menu).</p>"},{"location":"en/architecture/","title":"Architecture","text":"<p>Key modules:</p> <ul> <li>semantic-core \u2014 semantic processing</li> <li>execution-orchestrator \u2014 drivers (local/colab/cloud), <code>missions/</code></li> <li>publication-engine \u2014 publications</li> <li>datasets-ingestion \u2014 data ingestion</li> <li>attribution-registry \u2014 attribution/traceability</li> </ul> <p>Principle: clear separation (contracts, tests), per-module CI, shared documentation.</p>"},{"location":"en/dhatu-framework/","title":"Dh\u0101tu Framework","text":"<p>Conceptual atoms (indicative):</p> <ul> <li>COMM \u2014 communicate</li> <li>ITER \u2014 iterate</li> <li>TRANS \u2014 transform</li> <li>DECIDE \u2014 decide</li> <li>LOCATE \u2014 locate</li> <li>GROUP \u2014 group</li> <li>SEQ \u2014 sequence</li> </ul> <p>Goal: address and deduplicate by meaning. See Foundations and References.</p>"},{"location":"en/diagrams/","title":"Diagrams (PlantUML via Kroki)","text":"<p>This site renders diagrams-as-code to SVG with clickable hyperlinks.</p> <p>PlantUML example with links:</p> <pre><code>@startuml\nskinparam linetype ortho\nskinparam defaultFontName Roboto\nskinparam ArrowColor #1976D2\nskinparam RectangleFontStyle bold\n\nrectangle \"[[https://paninifs.org Home]]\" as Home #lightblue\nrectangle \"[[https://github.com/stephanedenis/PaniniFS Repo]]\" as Repo #lightgreen\nrectangle \"[[/en/specs/execution-orchestrator/ Orchestrator]]\" as Orchestrator #lightyellow\n\nHome --&gt; Repo : code\nHome --&gt; Orchestrator : specs\nRepo --&gt; Orchestrator : submodule\n@enduml\n</code></pre> <p>Notes: - PlantUML <code>[[url label]]</code> links become SVG links. - Mermaid is also supported via superfences.</p>"},{"location":"en/doc-process/","title":"Documentation Process (docs as code)","text":"<ul> <li>Single source: <code>docs_new/</code> (FR default) + <code>docs_new/en/</code>.</li> <li>FR/EN sync: any PR changing a FR page must change the EN counterpart (and vice versa).</li> <li>i18n plugin (MkDocs): bilingual navigation, URLs <code>/</code> and <code>/en/</code>.</li> <li>Review: at least one reviewer; check both languages for coherence.</li> <li>Style: see Style Guide.</li> </ul>"},{"location":"en/linguistic-foundations/","title":"Linguistic Foundations","text":"<ul> <li>P\u0101\u1e47ini and formal grammar as inspiration for concise, operational representations of meaning.</li> <li>Bridge between primitive linguistic units and engineering operations (clear, testable contracts).</li> <li>Align with existing practices (formal grammars, typing, operational semantics).</li> </ul> <p>Guidelines: keep minimal definitions, reference external sources, and state their mapping to PaniniFS.</p>"},{"location":"en/references/","title":"External References","text":"<ul> <li>P\u0101\u1e47ini \u2014 Asht\u0101dhy\u0101y\u012b (Sanskrit grammar)</li> <li>Formal grammars, operational semantics \u2014 reference handbooks</li> <li>MkDocs Material, mkdocs-static-i18n</li> <li>Python Typer, packaging</li> <li>Git, GitHub Actions</li> </ul>"},{"location":"en/style-guide/","title":"Style Guide","text":"<ul> <li>Clear and concise; prefer external references for standard notions.</li> <li>Titles aligned FR/EN; same anchors and structure.</li> <li>Short, reproducible examples; annotated code blocks.</li> <li>Terminology: keep proper names (P\u0101\u1e47ini, Dh\u0101tu), explain on first occurrence.</li> </ul>"},{"location":"en/vision/","title":"Vision","text":"<p>PaniniFS aims at a semantic filesystem where meaning comes first.</p> <ul> <li>Focus on the linguistics+computing axis (the \u201cwhat\u201d) before implementation details (the \u201chow\u201d).</li> <li>\u201cDocs as code\u201d, bilingual FR/EN, synchronized page by page.</li> <li>Prefer external references for standard concepts (do not reinvent wheels).</li> </ul> <p>See also: Linguistic Foundations, Dh\u0101tu Framework, Architecture.</p>"},{"location":"en/specs/execution-orchestrator/","title":"Specifications \u2014 Execution Orchestrator","text":"<p>Minimal contract:</p> <ul> <li>Input: <code>mission</code> (str), <code>backend</code> in {local, colab, cloud}</li> <li>Output: exit code int (0 = success)</li> <li>Drivers: expose <code>run(mission: str) -&gt; int</code></li> <li>Missions: expose <code>run() -&gt; int</code> or <code>main() -&gt; int</code></li> </ul> <p>Errors: - unknown backend \u2192 exit code 2 - unknown mission \u2192 delegated to driver</p> <p>Tests: CLI smoke, <code>echo</code> mission test.</p>"},{"location":"modules/","title":"Documentation des modules","text":"<p>Cette page est g\u00e9n\u00e9r\u00e9e automatiquement. Ne pas \u00e9diter manuellement.</p>"},{"location":"modules/#modules-detectes","title":"Modules d\u00e9tect\u00e9s","text":""},{"location":"specs/execution-orchestrator/","title":"Sp\u00e9cifications \u2014 Execution Orchestrator","text":"<p>Contrat minimal:</p> <ul> <li>Entr\u00e9e: <code>mission</code> (str), <code>backend</code> in {local, colab, cloud}</li> <li>Sortie: code de retour int (0 = succ\u00e8s)</li> <li>Drivers: exposent <code>run(mission: str) -&gt; int</code></li> <li>Missions: exposent <code>run() -&gt; int</code> ou <code>main() -&gt; int</code></li> </ul> <p>Erreurs: - backend inconnu \u2192 code 2 - mission inconnue \u2192 d\u00e9l\u00e9gu\u00e9e au driver</p> <p>Tests: smoke CLI, test mission <code>echo</code>.</p>"},{"location":"en/en/","title":"P\u0101\u1e47ini File System","text":"<p>Modular platform for metalinguistic information processing and storage.</p> <ul> <li>Vision: Linguistic Foundations, Dh\u0101tu Framework</li> <li>Architecture: System Architecture, Execution Orchestrator</li> <li>Documentation: Process, Style, References</li> <li>Diagrams: Diagrams (PlantUML)</li> <li>Modules: Modules docs index</li> </ul> <p>News: - Documentation is now the primary source; GitHub tasks are extracted automatically from TODO: in this doc. - The site is bilingual FR/EN (English menu).</p>"},{"location":"en/en/architecture/","title":"Architecture","text":"<p>Key modules:</p> <ul> <li>semantic-core \u2014 semantic processing</li> <li>execution-orchestrator \u2014 drivers (local/colab/cloud), <code>missions/</code></li> <li>publication-engine \u2014 publications</li> <li>datasets-ingestion \u2014 data ingestion</li> <li>attribution-registry \u2014 attribution/traceability</li> </ul> <p>Principle: clear separation (contracts, tests), per-module CI, shared documentation.</p>"},{"location":"en/en/dhatu-framework/","title":"Dh\u0101tu Framework","text":"<p>Conceptual atoms (indicative):</p> <ul> <li>COMM \u2014 communicate</li> <li>ITER \u2014 iterate</li> <li>TRANS \u2014 transform</li> <li>DECIDE \u2014 decide</li> <li>LOCATE \u2014 locate</li> <li>GROUP \u2014 group</li> <li>SEQ \u2014 sequence</li> </ul> <p>Goal: address and deduplicate by meaning. See Foundations and References.</p>"},{"location":"en/en/diagrams/","title":"Diagrams (PlantUML via Kroki)","text":"<p>This site renders diagrams-as-code to SVG with clickable hyperlinks.</p> <p>PlantUML example with links:</p> <pre><code>@startuml\nskinparam linetype ortho\nskinparam defaultFontName Roboto\nskinparam ArrowColor #1976D2\nskinparam RectangleFontStyle bold\n\nrectangle \"[[https://paninifs.org Home]]\" as Home #lightblue\nrectangle \"[[https://github.com/stephanedenis/PaniniFS Repo]]\" as Repo #lightgreen\nrectangle \"[[/en/specs/execution-orchestrator/ Orchestrator]]\" as Orchestrator #lightyellow\n\nHome --&gt; Repo : code\nHome --&gt; Orchestrator : specs\nRepo --&gt; Orchestrator : submodule\n@enduml\n</code></pre> <p>Notes: - PlantUML <code>[[url label]]</code> links become SVG links. - Mermaid is also supported via superfences.</p>"},{"location":"en/en/doc-process/","title":"Documentation Process (docs as code)","text":"<ul> <li>Single source: <code>docs_new/</code> (FR default) + <code>docs_new/en/</code>.</li> <li>FR/EN sync: any PR changing a FR page must change the EN counterpart (and vice versa).</li> <li>i18n plugin (MkDocs): bilingual navigation, URLs <code>/</code> and <code>/en/</code>.</li> <li>Review: at least one reviewer; check both languages for coherence.</li> <li>Style: see Style Guide.</li> </ul>"},{"location":"en/en/linguistic-foundations/","title":"Linguistic Foundations","text":"<ul> <li>P\u0101\u1e47ini and formal grammar as inspiration for concise, operational representations of meaning.</li> <li>Bridge between primitive linguistic units and engineering operations (clear, testable contracts).</li> <li>Align with existing practices (formal grammars, typing, operational semantics).</li> </ul> <p>Guidelines: keep minimal definitions, reference external sources, and state their mapping to PaniniFS.</p>"},{"location":"en/en/references/","title":"External References","text":"<ul> <li>P\u0101\u1e47ini \u2014 Asht\u0101dhy\u0101y\u012b (Sanskrit grammar)</li> <li>Formal grammars, operational semantics \u2014 reference handbooks</li> <li>MkDocs Material, mkdocs-static-i18n</li> <li>Python Typer, packaging</li> <li>Git, GitHub Actions</li> </ul>"},{"location":"en/en/style-guide/","title":"Style Guide","text":"<ul> <li>Clear and concise; prefer external references for standard notions.</li> <li>Titles aligned FR/EN; same anchors and structure.</li> <li>Short, reproducible examples; annotated code blocks.</li> <li>Terminology: keep proper names (P\u0101\u1e47ini, Dh\u0101tu), explain on first occurrence.</li> </ul>"},{"location":"en/en/vision/","title":"Vision","text":"<p>PaniniFS aims at a semantic filesystem where meaning comes first.</p> <ul> <li>Focus on the linguistics+computing axis (the \u201cwhat\u201d) before implementation details (the \u201chow\u201d).</li> <li>\u201cDocs as code\u201d, bilingual FR/EN, synchronized page by page.</li> <li>Prefer external references for standard concepts (do not reinvent wheels).</li> </ul> <p>See also: Linguistic Foundations, Dh\u0101tu Framework, Architecture.</p>"},{"location":"en/en/specs/execution-orchestrator/","title":"Specifications \u2014 Execution Orchestrator","text":"<p>Minimal contract:</p> <ul> <li>Input: <code>mission</code> (str), <code>backend</code> in {local, colab, cloud}</li> <li>Output: exit code int (0 = success)</li> <li>Drivers: expose <code>run(mission: str) -&gt; int</code></li> <li>Missions: expose <code>run() -&gt; int</code> or <code>main() -&gt; int</code></li> </ul> <p>Errors: - unknown backend \u2192 exit code 2 - unknown mission \u2192 delegated to driver</p> <p>Tests: CLI smoke, <code>echo</code> mission test.</p>"}]}